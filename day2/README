OfficeHour

再ハッシュすると、要素がより散らばって、計算が早くなる

putする
箱の中の要素も見る、item.nextなどで

キャッシュ 手元に置いておくもの
ページを表示するには時間がかかる
再度アクセスする場合、手元に以前のアクセスしたデータユーザーの手元に残しておく

全部を手元にキャッシュを残しておくことはできない
パソコンのメモリはかなり消費される
そのページは再度表示されないかもしれない

キャッシュはサイズに上限がある
だから、もともとあるキャッシュを選ばないといけない

キーと、URLが入力される
どのキャッシュを捨てるかのアルゴリズムを決める
一番最後にアクセスされたキャッシュを捨てる

課題の求められている振る舞いは？？？？？を考える
入力と出力

コーディングインタビュー
一番シンプルな正しく動くデータ構造を作る
シンプルなもの
遅くても動く

それを発展させていく、どこが遅いのか、遅いところを直す
それを進化させいく

一番シンプルなのは、配列が連結リストを考える

配列とは？？などの概念をしっかりしっている、かわしんさんは

アドレスでアクセスする
配列：順番に物を詰めていくにはよい
連結リスト：要素が一つある、次の要素は隣にはいない、ここにあるよというポインタを要素の中に保存していく
           ３番目の要素は何？ってなった時に、３つとなりにあるわけではない、ポインタをたどっていかないと要素が何かわからない

連結リストと配列  つなぎ合わせるのと違うの？
配列で要素を新たに入れたい場合
一つ一つメモリを動かさないといけない o(1)ポインタを一つつなぎ直すから


